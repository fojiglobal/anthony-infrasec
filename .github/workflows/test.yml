# This is a basic workflow to help you get started with Actions

name: Provision Terraform

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
    AWS_ACCESS_KEY_ID: ${{secrets.AWS_ACCESS_KEY_ID}}
    AWS_SECRET_ACCESS_KEY: ${{secrets.AWS_SECRET_ACCESS_KEY}}  

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  tfplan:
    ## Only Run TF Plan when a PR is opened
    if: github.event_name == 'pull_request'
    defaults:
      run:
        shell: bash
        working-directory: "./qa/us-east-2"
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3

      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        # continue-on-error: true
      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color

      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color
        # continue-on-error: true
        
      - uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            // 1. Retrieve existing bot comments for the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            })
            const botComment = comments.find(comment => {
              return comment.user.type === 'Bot' && comment.body.includes('Terraform Format and Style')
            })
    
            // 2. Prepare format of the comment
            const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
            #### Terraform Validation ü§ñ\`${{ steps.validate.outcome }}\`
            <details><summary>Validation Output</summary>
    
            \`\`\`\n
            ${{ steps.validate.outputs.stdout }}
            \`\`\`
    
            </details>
    
            #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
    
            <details><summary>Show Plan</summary>
    
            \`\`\`\n
            ${process.env.PLAN}
            \`\`\`
    
            </details>
    
            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;
    
            // 3. If we have a comment, update it, otherwise create a new one
            if (botComment) {
              github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              })
            } else {
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: output
              })
            }
      
  # This job performs a security scan on the Terraform code using Snyk.
  # It runs after the 'tfplan' job and uses the latest Ubuntu runner.
  # The Snyk scan checks for security misconfigurations and requires all critical and high issues to be resolved before merging to the main branch.
  terraform-snyk-scan:
      if: github.event_name == 'push' || github.event_name == 'pull_request' 
      needs: tfplan
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v2
        - name: Scan Terraform Code for Security Misconfigurations. Resolve All Critical and High Issues before Merging to Main
          uses: snyk/actions/iac@master
          env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
          with:
            file: './qa/us-east-2'
            args: --severity-threshold=high
       
  # This job applies the Terraform configuration.
  # It runs only on push events and after the 'terraform-snyk-scan' job.
  # The job uses the latest Ubuntu runner.
  tfapply:
      if: github.event_name == 'push'
      #needs: terraform-snyk-scan
      runs-on: ubuntu-latest
      steps:
        - uses: actions/checkout@v4
        - name: Deploy Terraform
          run: echo "Terraform Apply"
        